[manifest]
version = "1.0.0"
priority = 0

#
# Adds calculation contexts to modify hand level
# These are REALLY jank currently, piggybacking off probability manip
#

# CardArea:parse_highlighted()
[[patches]]
[patches.pattern]
target = "cardarea.lua"
pattern = '''update_hand_text({immediate = true, nopulse = nil, delay = 0}, {handname=disp_text, level=G.GAME.hands[text].level, mult = G.GAME.hands[text].mult, chips = G.GAME.hands[text].chips})'''
position = "at"
payload = '''local effective_hand = {
    level = G.GAME.hands[text].level,
    mult = G.GAME.hands[text].mult,
    chips = G.GAME.hands[text].chips
}
local mod_level = SMODS.get_effective_hand_level(effective_hand.level, { arrow_highlight_level = effective_hand.level, handname = disp_text })
if mod_level ~= G.GAME.hands[text].level then
    effective_hand.level = mod_level
    effective_hand.mult = math.max(G.GAME.hands[text].s_mult + G.GAME.hands[text].l_mult * (effective_hand.level - 1), 1)
    effective_hand.chips = math.max(G.GAME.hands[text].s_chips + G.GAME.hands[text].l_chips * (effective_hand.level - 1), 0)
end

update_hand_text({immediate = true, nopulse = true, delay = 0}, {
    handname = disp_text,
    level = effective_hand.level,
    mult = effective_hand.mult,
    chips = effective_hand.chips
})'''
match_indent = true
times = 1

# G.FUNCS.evaluate_play()
[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = '''update_hand_text({sound = G.GAME.current_round.current_hand.handname ~= disp_text and 'button' or nil, volume = 0.4, immediate = true, nopulse = nil,
            delay = G.GAME.current_round.current_hand.handname ~= disp_text and 0.4 or 0}, {handname=disp_text, level=G.GAME.hands[text].level, mult = G.GAME.hands[text].mult, chips = G.GAME.hands[text].chips})'''
position = "at"
payload = '''local effective_hand = {
    level = G.GAME.hands[text].level,
    mult = G.GAME.hands[text].mult,
    chips = G.GAME.hands[text].chips
}
local mod_level = SMODS.get_effective_hand_level(effective_hand.level, { arrow_initial_level = effective_hand.level, scoring_hand = scoring_hand, handname = disp_text })
if mod_level ~= G.GAME.hands[text].level then
    effective_hand.level = mod_level
    effective_hand.mult = math.max(G.GAME.hands[text].s_mult + G.GAME.hands[text].l_mult * (effective_hand.level - 1), 1)
    effective_hand.chips = math.max(G.GAME.hands[text].s_chips + G.GAME.hands[text].l_chips * (effective_hand.level - 1), 0)
    update_hand_text({delay = 0, nopulse = true}, {
        handname = disp_text,
        level = effective_hand.level,
        mult = effective_hand.mult,
        chips = effective_hand.chips
    })
end'''
match_indent = true
times = 1

# G.FUNCS.evaluate_play()
[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = '''if not G.GAME.blind:debuff_hand(G.play.cards, poker_hands, text) then
    mult = mod_mult(G.GAME.hands[text].mult)
    hand_chips = mod_chips(G.GAME.hands[text].chips)'''
position = "at"
payload = '''if not G.GAME.blind:debuff_hand(G.play.cards, poker_hands, text) then
    mult = mod_mult(effective_hand.mult)
    hand_chips = mod_chips(effective_hand.chips)'''
match_indent = true
times = 1

# G.FUNCS.evaluate_play()
[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = '''SMODS.displayed_hand = nil

mult = mod_mult(G.GAME.hands[text].mult)
hand_chips = mod_chips(G.GAME.hands[text].chips)'''
position = "at"
payload = '''SMODS.displayed_hand = nil

mod_level = SMODS.get_effective_hand_level(effective_hand.level, { arrow_before_level = effective_hand.level, scoring_hand = scoring_hand, handname = disp_text })
if mod_level ~= G.GAME.hands[text].level then
    effective_hand.level = mod_level
    effective_hand.mult = math.max(G.GAME.hands[text].s_mult + G.GAME.hands[text].l_mult * (effective_hand.level - 1), 1)
    effective_hand.chips = math.max(G.GAME.hands[text].s_chips + G.GAME.hands[text].l_chips * (effective_hand.level - 1), 0)
    update_hand_text({delay = 0}, {
        handname = disp_text,
        level = effective_hand.level,
        mult = effective_hand.mult,
        chips = effective_hand.chips
    })
end

mult = mod_mult(effective_hand.mult)
hand_chips = mod_chips(effective_hand.chips)'''
match_indent = true
times = 1









